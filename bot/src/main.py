import datetime

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton

from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    ConversationHandler, CallbackQueryHandler, filters, MessageHandler
)

from config import TOKEN
from flat import get_test_flat
from logger import logger
from data_worker import update_action, update_user


END = ConversationHandler.END
CHOICE_BUTTONS_ROOMS = 'choice_1', 'choice_2', 'choice_3', 'choice_4', 'choice_studio'
CHOICE_BUTTONS_PRICE = "150_200", "200_250", "250_300", "300_350", "bolee350"
AWAITING_TEXT_RESPONSE = 1


def get_keyboard(texts: list[str], callback_data: list[str]):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
    """
    keyboard = [
            [InlineKeyboardButton(t, callback_data=c) for t, c in zip(texts, callback_data)]
        ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    return reply_markup


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.
    """
    user = update.effective_chat
    context.user_data['state'] = 0
    logger.info(f'The user (username={user.username}) launched the bot')

    # update_action(
    #     data=[(user.username, 'start', datetime.datetime.now())]
    # )

    reply_markup = get_keyboard(
        texts=["–ù–∞–∂–∏–º–∞–π —Ç—É—Ç ‚û°Ô∏è"],
        callback_data=["set_up_filters_get_started"]
    )

    texts = f"–ü—Ä–∏–≤–µ—Ç, {user.full_name}!\
        –Ø –±–æ—Ç Hatka. –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–µ–±–µ –∫–≤–∞—Ä—Ç–∏—Ä—É!\n–ù–∞–∂–º–∏ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞: "

    await update.message.reply_text(
        text=texts,
        reply_markup=reply_markup)


async def set_up_filters_get_started(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –Ω–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Ä –∫–≤–∞—Ä—Ç–∏—Ä.
    """
    user_data = update.effective_chat

    query = update.callback_query
    await query.answer()

    texts = f"{user_data.username},\
        –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ —Å—Ä–∞–∑—É –Ω–∞—á–∞—Ç—å –∏—Å–∫–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É."

    reply_markup = get_keyboard(
        texts=["–§–∏–ª—å—Ç—Ä—ã üìã", "–ù–∞—á–∞—Ç—å üåà"],
        callback_data=["get_number_rooms", "start_flat_selection"]
    )
    bot_answer = query.edit_message_text(
        text=texts,
        reply_markup=reply_markup)

    await bot_answer


async def get_number_rooms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —á–∏—Å–ª–æ –∫–æ–º–Ω–∞—Ç.
    """
    query = update.callback_query

    await query.answer()

    texts = "*‚úÖ 1/3.* –í—ã–±–µ—Ä–µ—Ç–µ —á–∏—Å–ª–æ –∫–æ–º–Ω–∞—Ç:"

    # TODO: –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫, –ø–æ–¥ —Ä–∞–∑–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    keyboard = [
        [InlineKeyboardButton(text="1Ô∏è‚É£", callback_data=CHOICE_BUTTONS_ROOMS[0]),
         InlineKeyboardButton(text="2Ô∏è‚É£", callback_data=CHOICE_BUTTONS_ROOMS[1])],
        [InlineKeyboardButton(text="3Ô∏è‚É£", callback_data=CHOICE_BUTTONS_ROOMS[2]),
         InlineKeyboardButton(text="4Ô∏è‚É£", callback_data=CHOICE_BUTTONS_ROOMS[3])],
        [InlineKeyboardButton(text="—Å—Ç—É–¥–∏—è ", callback_data=CHOICE_BUTTONS_ROOMS[4])]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    bot_answer = query.edit_message_text(
            text=texts,
            reply_markup=reply_markup,
            parse_mode="Markdown"
    )

    await bot_answer


async def get_price_limit(update: Update, context: ContextTypes.DEFAULT_TYPE):

    # –ü–æ–ª—É—á–∞—é —á–∏—Å–ª–æ –∫–æ–º–Ω–∞—Ç
    query = update.callback_query
    user = update.effective_chat
    choice_nrooms = query.data

    if choice_nrooms == 'choice_1':
        context.user_data['choice_nrooms'] = '1'
    logger.info(f'The user (username={user}) choice_nrooms={choice_nrooms}')
    # TODO: –ª–æ–≥–∏–∫–∞ –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–≥–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è

    await query.answer()

    logger.debug('–Ø —Ç—É—Ç 1!')
    texts = "*‚úÖ 2/3.* –í—ã–±–µ—Ä–µ—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å—É–º–º—É:"

    keyboard = [
        [InlineKeyboardButton(text="150$-200$", callback_data=CHOICE_BUTTONS_PRICE[0]),
         InlineKeyboardButton(text="200$-250$", callback_data=CHOICE_BUTTONS_PRICE[1])],
        [InlineKeyboardButton(text="250$-300$", callback_data=CHOICE_BUTTONS_PRICE[2]),
         InlineKeyboardButton(text="300$-350$", callback_data=CHOICE_BUTTONS_PRICE[3])],
        [InlineKeyboardButton(text=">350$", callback_data=CHOICE_BUTTONS_PRICE[4])]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    bot_answer = query.edit_message_text(
            text=texts,
            reply_markup=reply_markup,
            parse_mode="Markdown"
    )

    await bot_answer


async def get_about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Å–µ–±—è –∏ —Å–≤–æ–µ–≥–æ –∂–µ–ª–µ–Ω–∏—è
    """

    # –ú–µ–Ω—è—é —Å—Ç–∞—Ç—É—Å –Ω–∞ —Å–ª—É—à–∞–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    context.user_data['state'] = AWAITING_TEXT_RESPONSE

    # –ü–æ–ª—É—á–∞—é –ø—Ä–µ–¥–µ–ª—ã —Å—É–º–º
    query = update.callback_query
    user = update.effective_chat
    choice_price = query.data
    if choice_price == '250_300':
        context.user_data['choice_price'] = "250$-300$"
    logger.info(f'The user (username={user}) choice_price={choice_price}')

    await query.answer()

    texts = "*‚úÖ 3/3.* –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –∏–ª–∏ –ø—Ä–æ –≤–∞—à—É –∫–≤–∞—Ä—Ç–∏—Ä—É:"

    keyboard = [
        [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚õî", callback_data="skip")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    bot_answer = query.edit_message_text(
                text=texts,
                reply_markup=reply_markup,
                parse_mode="Markdown"
        )

    await bot_answer


async def handle_text_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('state') == AWAITING_TEXT_RESPONSE:
        user_response = update.message.text
        context.user_data['user_response'] = user_response
        logger.debug(f"SAVE: {user_response}")

        context.user_data['state'] = 0
        texts = "–ú—ã –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∏–Ω–∞—Ç—å.\n" + \
            "–í–æ—Ç –≤–∞—à–∏ –ø—Ä–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n" + \
            f"*–ö–æ–º–Ω–∞—Ç:* {context.user_data['choice_nrooms']}\n" + \
            f"*–¶–µ–Ω—ã:* {context.user_data['choice_price']}\n" + \
            f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {context.user_data['user_response']}\n\n" + \
            "–§–∏–ª—å—Ç—Ä—ã –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–∞–≤–∏—Ç—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /poll"
        keyboard = [
            [InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å ü´°", callback_data="start_flat_selection")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        bot_answer = update.message.reply_text(
            text=texts,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

        await bot_answer


async def skip_abount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['state'] = 0
    texts = "–ú—ã –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∏–Ω–∞—Ç—å. –§–∏–ª—å—Ç—Ä—ã –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–∞–≤–∏—Ç—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /poll"
    keyboard = [
        [InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å ü´°", callback_data="start_flat_selection")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query = update.callback_query
    await query.answer()
    bot_answer = query.edit_message_text(
        text=texts,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

    await bot_answer


async def start_flat_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = get_keyboard(
        texts=["üëç", "üëé"],
        callback_data=["like", "dislike"]
    )
    query = update.callback_query

    await query.answer()
    data = get_test_flat()
    link = f"[üîó –æ—Ç–∫—Ä—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ]({data['href']})"
    answer = f"*{data['title']}*\n\n{link}"

    await query.edit_message_text(
        text=answer,
        reply_markup=reply_markup, parse_mode='Markdown')

# async def like(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """–û–∂–∏–¥–∞–µ—Ç—Å—è —á—Ç–æ —ç—Ç–æ –±—É–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ –Ω—Ä–∞–≤–∏—Ç—Å—è.
#     TODO:
#         - –Ω–∞–∂–∞—Ç–∏–µ –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç "–ø–æ—Ö–æ–∂–µ–π" –∫–≤
#         - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–≤ –Ω—Ä–∞–≤
#     """
#     user = update.effective_chat

#     logger.info(f"The user (username={user.username}) clicked the button (button=like)")

#     update_action(
#         data=[(user.username, 'like', datetime.datetime.now())]
#     )

#     reply_markup = get_keyboard(
#         texts=["üëç", "üëé"],
#         callback_data=["like", "dislike"]
#     )

#     query = update.callback_query

#     await query.answer()

#     data = get_test_flat()
#     link = f"[üîó –æ—Ç–∫—Ä—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ]({data['href']})"
#     answer = f"*{data['title']}*\n\n{link}"

#     update_user(
#         data=[(user.username, data['id'], 'like', datetime.datetime.now())]
#     )

#     await query.edit_message_text(context.user_data["last_text"], parse_mode="Markdown")

#     context.user_data["last_text"] = answer

#     await query.message.reply_text(text=answer, reply_markup=reply_markup, parse_mode="Markdown")
#     # await query.edit_message_text(
#     #     text=answer,
#     #     reply_markup=reply_markup, parse_mode='Markdown')


# async def dislike(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """–û–∂–∏–¥–∞–µ—Ç—Å—è —á—Ç–æ —ç—Ç–æ –±—É–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ –Ω–µ–Ω—Ä–∞–≤.
#     TODO:
#         - –ø–æ–º–µ—á–∞–µ—Ç —á—Ç–æ –¥–∞–Ω–Ω—ã–π —Ç–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è
#         - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —É—á–µ—Ç–æ–º "–ø–æ–∂–µ–ª–∞–Ω–∏—è"
#         - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±–µ–∫–µ–Ω–¥—É –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏,
#             —á—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω—Ä–∞–≤—è—Ç—Å—è —Ç–∞–∫–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã
#     """
#     user = update.effective_chat

#     logger.info(f"The user (username={user.username}) clicked the button (button=dislike)")

#     update_action(
#         data=[(user.username, 'dislike', datetime.datetime.now())]
#     )

#     reply_markup = get_keyboard(
#         texts=["üëç", "üëé"],
#         callback_data=["like", "dislike"]
#     )

#     query = update.callback_query

#     await query.answer()

#     data = get_test_flat()
#     link = f"[üîó –æ—Ç–∫—Ä—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ]({data['href']})"
#     answer = f"*{data['title']}*\n\n{link}"

#     update_user(
#         data=[(user.username, data['id'], 'dislike', datetime.datetime.now())]
#     )

#     context.user_data["last_text"] = answer

#     await query.edit_message_text(
#         text=answer,
#         reply_markup=reply_markup, parse_mode='Markdown')


# async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     await update.message.reply_text("Okay, bye.")
#     return END


# async def all_likes_flat(update: Update):
#     """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–≤–∞—Ä—Ç–∏—Ä –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
#     TODO:
#         - –ù–∞–¥–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –∫–∞–∫ —Ö—Ä–∞–Ω–∏—Ç—å –≤—Å—é —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
#     """
#     pass


def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(
        CommandHandler("start", start)
    )
    app.add_handler(
        CallbackQueryHandler(set_up_filters_get_started, pattern='set_up_filters_get_started')
    )
    app.add_handler(
        CallbackQueryHandler(get_number_rooms, pattern='get_number_rooms')
    )
    app.add_handler(
        CallbackQueryHandler(start_flat_selection, pattern='start_flat_selection')
    )
    for button_name in CHOICE_BUTTONS_ROOMS:
        app.add_handler(
            CallbackQueryHandler(get_price_limit, pattern=button_name)
        )
    for button_name in CHOICE_BUTTONS_PRICE:
        app.add_handler(
            CallbackQueryHandler(get_about, pattern=button_name)
        )
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_response))
    app.add_handler(
            CallbackQueryHandler(skip_abount, pattern='skip')
        )
    app.add_handler(
            CallbackQueryHandler(start_flat_selection, pattern='start_flat_selection')
        )

    app.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
