from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton

from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler,
    ConversationHandler, filters, CallbackQueryHandler
)

from config import TOKEN
from flat import get_test_flat

from logger import logger, error_logger


END = ConversationHandler.END


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.effective_chat
    logger.info(f'The user {user_name.username} launched the bot')
    keyboard = [
            [InlineKeyboardButton("–ù–∞–∂–∏–º–∞–π —Ç—É—Ç ‚û°Ô∏è", callback_data="give")]
        ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç Hatka. –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–µ–±–µ –∫–≤–∞—Ä—Ç–∏—Ä—É!\n–ù–∞–∂–º–∏ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞: ",
        reply_markup=reply_markup)


async def give(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
            [InlineKeyboardButton("üëç", callback_data="like"),
             InlineKeyboardButton("üëé", callback_data="dislike")]
        ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query = update.callback_query
    await query.answer()

    data = get_test_flat()
    link = f"[üîó –æ—Ç–∫—Ä—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ]({data['href']})"
    answer = f"*{data['title']}*\n\n{link}"

    await query.edit_message_text(
        text=answer,
        reply_markup=reply_markup, parse_mode='Markdown')


async def like():
    """–û–∂–∏–¥–∞–µ—Ç—Å—è —á—Ç–æ —ç—Ç–æ –±—É–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ –Ω—Ä–∞–≤–∏—Ç—Å—è.
    TODO:
        - –Ω–∞–∂–∞—Ç–∏–µ –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç "–ø–æ—Ö–æ–∂–µ–π" –∫–≤
        - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–≤ –Ω—Ä–∞–≤
    """


async def dislike():
    """–û–∂–∏–¥–∞–µ—Ç—Å—è —á—Ç–æ —ç—Ç–æ –±—É–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ –Ω–µ–Ω—Ä–∞–≤.
    TODO:
        - –ø–æ–º–µ—á–∞–µ—Ç —á—Ç–æ –¥–∞–Ω–Ω—ã–π —Ç–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è
        - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —É—á–µ—Ç–æ–º "–ø–æ–∂–µ–ª–∞–Ω–∏—è"
        - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±–µ–∫–µ–Ω–¥—É –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏,
            —á—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω—Ä–∞–≤—è—Ç—Å—è —Ç–∞–∫–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã
    """
    pass


async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Okay, bye.")
    return END


async def all_likes_flat():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–≤–∞—Ä—Ç–∏—Ä –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    TODO:
        - –ù–∞–¥–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –∫–∞–∫ —Ö—Ä–∞–Ω–∏—Ç—å –≤—Å—é —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
    """
    pass


def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(give, pattern='give'))
    app.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
